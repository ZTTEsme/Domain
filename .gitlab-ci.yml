image: "node:18-slim"

stages:
  - build
  - publish

variables:
  TRANSLATOR_VERSION: "1.3.10"

build:internationalization:
  stage: build
  image: "docker-i4dev.cloos.de/libs/java/translator"
  variables:
    TRANSLATION_IGNORELIST: "C-Gate,IoT Hub,IoT Connector,Carola EDI,Carola,CAROLA,RoboPlan,QNECT,PAK-ID"
  cache:
    - key:
        files:
          - libs/i18n/xliff/xml/qnect.en.xlf
      paths:
        - libs/i18n/xliff/xml
  artifacts:
    paths:
      - libs/i18n/xliff/xml
    expire_in: 8h
  script:
    - deepl-translator -b libs/i18n/xliff/xml/qnect -s en-US -t cs    -m "qnect-customer-management" -i "$TRANSLATION_IGNORELIST"
    - deepl-translator -b libs/i18n/xliff/xml/qnect -s en-US -t de-DE -m "qnect-customer-management" -i "$TRANSLATION_IGNORELIST"
    - deepl-translator -b libs/i18n/xliff/xml/qnect -s en-US -t es    -m "qnect-customer-management" -i "$TRANSLATION_IGNORELIST"
    - deepl-translator -b libs/i18n/xliff/xml/qnect -s en-US -t fr    -m "qnect-customer-management" -i "$TRANSLATION_IGNORELIST"
    - deepl-translator -b libs/i18n/xliff/xml/qnect -s en-US -t it    -m "qnect-customer-management" -i "$TRANSLATION_IGNORELIST"
    - deepl-translator -b libs/i18n/xliff/xml/qnect -s en-US -t nl    -m "qnect-customer-management" -i "$TRANSLATION_IGNORELIST"
    - deepl-translator -b libs/i18n/xliff/xml/qnect -s en-US -t pl    -m "qnect-customer-management" -i "$TRANSLATION_IGNORELIST"
    - deepl-translator -b libs/i18n/xliff/xml/qnect -s en-US -t pt-BR -m "qnect-customer-management" -i "$TRANSLATION_IGNORELIST"
    - deepl-translator -b libs/i18n/xliff/xml/qnect -s en-US -t ru    -m "qnect-customer-management" -i "$TRANSLATION_IGNORELIST"
    - deepl-translator -b libs/i18n/xliff/xml/qnect -s en-US -t tr    -m "qnect-customer-management" -i "$TRANSLATION_IGNORELIST"
    - deepl-translator -b libs/i18n/xliff/xml/qnect -s en-US -t zh-CN -m "qnect-customer-management" -i "$TRANSLATION_IGNORELIST"

build:node-build:
  stage: build
  needs:
    - "build:internationalization"
  script:
    - npm install
    - npm run build
  artifacts:
    when: always
    paths:
      - build
    expire_in: 24h

.publish_docker_variables: &publish_docker_variables
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  IMAGE_LATEST: ${CONTAINER_REGISTRY}/${CI_PROJECT_PATH}:latest
  IMAGE_BRANCH: ${CONTAINER_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_SLUG}
  IMAGE_TAG: ${CONTAINER_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_TAG}
  PATH_DOCKERFILE: docker/Dockerfile

.publish_docker_template: &publish_docker_template
  stage: publish
  image: "docker:20.10"
  needs:
    - "build:node-build"
  services:
    - name: docker:20.10-dind
      alias: docker
  before_script:
    - docker info
    - docker login -u $CONTAINER_REGISTRY_USER -p $CONTAINER_REGISTRY_PASSWORD $CONTAINER_REGISTRY
  script:
    - if  [ -n "$CI_COMMIT_TAG" ]; then
      echo CI_COMMIT_TAG ${CI_COMMIT_TAG};
      docker build -f ${PATH_DOCKERFILE} --cache-from ${IMAGE_LATEST} -t ${IMAGE_TAG} -t ${IMAGE_LATEST} -t ${IMAGE_BRANCH}  .;
      docker push ${IMAGE_TAG};
      docker push ${IMAGE_LATEST};
      docker push ${IMAGE_BRANCH};
      elif [[ "$CI_COMMIT_REF_SLUG" == "main" ]]; then
      docker build -f ${PATH_DOCKERFILE} --cache-from ${IMAGE_LATEST} -t ${IMAGE_LATEST} -t ${IMAGE_BRANCH}  .;
      docker push ${IMAGE_LATEST};
      docker push ${IMAGE_BRANCH};
      else
      docker build -f ${PATH_DOCKERFILE} --cache-from ${IMAGE_LATEST} -t ${IMAGE_BRANCH}  .;
      docker push ${IMAGE_BRANCH};
      fi

publish-2-cloos:docker:
  <<: *publish_docker_template
  variables:
    CONTAINER_REGISTRY: ${CI_REGISTRY}
    CONTAINER_REGISTRY_USER: ${CI_REGISTRY_USER}
    CONTAINER_REGISTRY_PASSWORD: ${CI_REGISTRY_PASSWORD}
    <<: *publish_docker_variables

publish-2-azure:docker:
  <<: *publish_docker_template
  variables:
    CONTAINER_REGISTRY: ${AZURE_REGISTRY}
    CONTAINER_REGISTRY_USER: ${AZURE_REGISTRY_USER}
    CONTAINER_REGISTRY_PASSWORD: ${AZURE_REGISTRY_PASSWORD}
    <<: *publish_docker_variables
